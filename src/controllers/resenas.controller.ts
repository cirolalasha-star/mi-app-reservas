import { PrismaClient } from '@prisma/client'
import { Request, Response } from 'express'

const prisma = new PrismaClient()

// ‚úÖ Obtener todas las rese√±as con su usuario y tour
export const getResenas = async (_req: Request, res: Response) => {
  try {
    const resenas = await prisma.resenas.findMany({
      include: {
        usuario: true, // ‚úÖ singular
        tour: true,    // ‚úÖ singular
      },
    })
    res.json(resenas)
  } catch (error) {
    console.error(error)
    res.status(500).json({ message: 'Error al obtener las rese√±as' })
  }
}
// üîπ 1. Obtener rese√±as aprobadas de un tour
export const getResenasPorTour = async (req: Request, res: Response) => {
  try {
    const { id } = req.params
    const rese√±as = await prisma.resenas.findMany({
      where: { tour_id: Number(id), aprobado: true },
      include: { usuario: { select: { nombre: true } } },
      orderBy: { fecha: 'desc' },
    })
    res.json(rese√±as)
  } catch (error) {
    console.error(error)
    res.status(500).json({ message: 'Error al obtener rese√±as' })
  }
}

// ‚úÖ Obtener rese√±a por ID
export const getResenaById = async (req: Request, res: Response) => {
  try {
    const { id } = req.params
    const resena = await prisma.resenas.findUnique({
      where: { id: Number(id) },
      include: {
        usuario: true,
        tour: true,
      },
    })

    if (!resena) {
      return res.status(404).json({ message: 'Rese√±a no encontrada' })
    }

    res.json(resena)
  } catch (error) {
    console.error(error)
    res.status(500).json({ message: 'Error al obtener la rese√±a' })
  }
}

// üîπ 2. Crear una nueva rese√±a (pendiente de aprobaci√≥n)
export const createResena = async (req: Request, res: Response) => {
  try {
    const { usuario_id, tour_id, comentario, puntuacion, detectarSpam } = req.body
    const nuevaResena = await prisma.resenas.create({
      data: { usuario_id, tour_id, comentario, puntuacion },
    })
    const esSpam = await detectarSpam(comentario)
    if (esSpam) return res.status(400).json({ message: "Rese√±a detectada como spam" })

    res.status(201).json({
      message: 'Rese√±a enviada correctamente. Pendiente de aprobaci√≥n.',
      rese√±a: nuevaResena,
    })
  } catch (error) {
    console.error(error)
    res.status(500).json({ message: 'Error al crear rese√±a' })
  }
}
// üîπ 3. Aprobaci√≥n o rechazo de rese√±as por un admin
export const moderarResena = async (req: Request, res: Response) => {
  try {
    const { id } = req.params
    const { aprobado } = req.body

    const rese√±a = await prisma.resenas.update({
      where: { id: Number(id) },
      data: { aprobado },
    })
    res.json({ message: `Rese√±a ${aprobado ? 'aprobada' : 'rechazada'}`, rese√±a })
  } catch (error) {
    console.error(error)
    res.status(500).json({ message: 'Error al moderar rese√±a' })
  }
}

// ‚úÖ Eliminar rese√±a
export const deleteResena = async (req: Request, res: Response) => {
  try {
    const { id } = req.params
    await prisma.resenas.delete({ where: { id: Number(id) } })
    res.json({ message: 'Rese√±a eliminada correctamente' })
  } catch (error) {
    console.error(error)
    res.status(500).json({ message: 'Error al eliminar la rese√±a' })
  }
}


/**
 * getResenasPorTour  Devuelve rese√±as aprobadas (para mostrar al p√∫blico)
 * incluude: {usuario:}  A√±ade el nombre del usuario que la escribi√≥
 * createResena   Permite que un usuario cree una rese√±a pendiente de aprobaci√≥n
 * moderarResena   Solo el admin puede cambiar aprobado a true o false
 */